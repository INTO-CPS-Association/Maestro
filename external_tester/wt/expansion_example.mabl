simulation 
import FixedStep;
import Initializer;
import DebugLogging;
import TypeConverter;
import DataWriter;
import FMI2;
import Math;
import ArrayUtil;
import Logger;
@Framework( "FMI2");
@FrameworkConfig( "FMI2", "{\"fmus\":{\"{crtl}\":\"wt/watertankcontroller-c.fmu\",\"{wt}\":\"wt/singlewatertank-20sim.fmu\"},\"connections\":{\"{crtl}.crtlInstance.valve\":[\"{wt}.wtInstance.valvecontrol\"],\"{wt}.wtInstance.level\":[\"{crtl}.crtlInstance.level\"]},\"livestream\":{\"{crtl}.crtlInstance\":[\"valve\"],\"{wt}.wtInstance\":[\"level\"]},\"parameters\":{\"{crtl}.crtlInstance.maxlevel\":2,\"{crtl}.crtlInstance.minlevel\":1},\"startTime\":0.0,\"endTime\":10.0,\"logLevels\":{},\"reportProgress\":true,\"loggingOn\":false,\"visible\":false,\"algorithm\":{\"type\":\"fixed-step\",\"size\":0.1}}");
{
 	bool global_execution_continue = true;
	Math math = load("Math");
	Logger logger = load("Logger");
	DataWriter dataWriter = load("DataWriter");
	FMI2 crtl = load("FMI2", "{8c4e810f-3df3-4a00-8276-176fa3c9f000}", "wt/watertankcontroller-c.fmu");
	if( (crtl == null) )
	{
		global_execution_continue = false;
	}
	FMI2 wt = load("FMI2", "{cfc65592-9ece-4563-9705-1581b6e7071c}", "wt/singlewatertank-20sim.fmu");
	if( (wt == null) )
	{
		global_execution_continue = false;
	}
	@map wtInstance -> "wtInstance";
	FMI2Component wtInstance = null;
	if( (global_execution_continue) )
	{
			wtInstance = wt.instantiate("wtInstance", false, false);
			if( (wtInstance == null) )
			{
				global_execution_continue = false;
			}
	}
	@map crtlInstance -> "crtlInstance";
	FMI2Component crtlInstance = null;
	if( (global_execution_continue) )
	{
			crtlInstance = crtl.instantiate("crtlInstance", false, false);
			if( (crtlInstance == null) )
			{
				global_execution_continue = false;
			}
	}
	if( (global_execution_continue) )
	{
			FMI2Component components[2] = { wtInstance , crtlInstance };
			real START_TIME = 0.0;
			real STEP_SIZE = 0.1;
			real END_TIME = 10.0;
			@Config("{\"parameters\":{\"{crtl}.crtlInstance.maxlevel\":2,\"{crtl}.crtlInstance.minlevel\":1}}");
			Initializer.expand initialize(components, START_TIME, END_TIME);
			FixedStep.expand fixedStep(components, STEP_SIZE, START_TIME, END_TIME);
	}
	wt.freeInstance(wtInstance);
	crtl.freeInstance(crtlInstance);
	unload(crtl);
	unload(wt);
	unload(math);
	unload(logger);
	unload(dataWriter);
}
