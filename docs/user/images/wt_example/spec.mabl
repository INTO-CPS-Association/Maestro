simulation 
import FixedStep;
import TypeConverter;
import Initializer;
import DebugLogging;
{
 	bool global_execution_continue = true;
	Math math = load("Math");
	Logger logger = load("Logger");
	DataWriter dataWriter = load("DataWriter");
	FMI2 tank = load("FMI2", "{cfc65592-9ece-4563-9705-1581b6e7071c}", "src/test/resources/singlewatertank-20sim.fmu");
	if( ((tank == null)) )
	{
		global_execution_continue = false;
	}
	FMI2 controller = load("FMI2", "{8c4e810f-3df3-4a00-8276-176fa3c9f000}", "src/test/resources/watertankcontroller-c.fmu");
	if( ((controller == null)) )
	{
		global_execution_continue = false;
	}
	@map wtInstance -> "wtInstance";
	FMI2Component wtInstance = null;
	if( ((global_execution_continue)) )
	{
			wtInstance = tank.instantiate("wtInstance", false, false);
			if( ((wtInstance == null)) )
			{
				global_execution_continue = false;
			}
	}
	@map crtlInstance -> "crtlInstance";
	FMI2Component crtlInstance = null;
	if( ((global_execution_continue)) )
	{
			crtlInstance = controller.instantiate("crtlInstance", false, false);
			if( ((crtlInstance == null)) )
			{
				global_execution_continue = false;
			}
	}
	FMI2Component[] components[2] = { wtInstance , crtlInstance };
	real START_TIME = 0.0;
	real STEP_SIZE = 0.001;
	real END_TIME = 0.0;
	while( (global_execution_continue) )
	{
		int status = 0;
		status = wtInstance.setupExperiment(false, 0.0, START_TIME, true, END_TIME);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "Setup Experiment Failed:  %d", status);
				global_execution_continue = false;
				break;
		}
		status = crtlInstance.setupExperiment(false, 0.0, START_TIME, true, END_TIME);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "Setup Experiment Failed:  %d", status);
				global_execution_continue = false;
				break;
		}
		real[] realValueSize7[7] = { 9.0 , 1.0 , 1.0 , 9.81 , 1.0 , 0.0 , 0.0 };
		uInt[] valRefsSize7[7] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 };
		status = wtInstance.setReal(valRefsSize7, 7, realValueSize7);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "set failed %d", status);
				global_execution_continue = false;
				break;
		}
		real[] realValueSize2[2] = { 2.0 , 1.0 };
		uInt[] valRefsSize2[2] = { 0 , 1 };
		status = crtlInstance.setReal(valRefsSize2, 2, realValueSize2);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "set failed %d", status);
				global_execution_continue = false;
				break;
		}
		status = wtInstance.enterInitializationMode();
		status = crtlInstance.enterInitializationMode();
		bool[] BooleanValueSize1[1];
		uInt[] valRefsSize1[1] = { 4 };
		status = crtlInstance.getBoolean(valRefsSize1, 1, BooleanValueSize1);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "get failed %d", status);
				global_execution_continue = false;
				break;
		}
		bool crtlInstanceSvValRef4 = BooleanValueSize1[0];
		real wtInstanceSvValRef16Real;
		if( (crtlInstanceSvValRef4) )
		{
			wtInstanceSvValRef16Real = 1.0;
		}
		else
		{
			wtInstanceSvValRef16Real = 0.0;
		}
		real[] realValueSize1[1] = { wtInstanceSvValRef16Real };
		valRefsSize1[0] = 16;
		status = wtInstance.setReal(valRefsSize1, 1, realValueSize1);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "set failed %d", status);
				global_execution_continue = false;
				break;
		}
		valRefsSize1[0] = 17;
		status = wtInstance.getReal(valRefsSize1, 1, realValueSize1);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "get failed %d", status);
				global_execution_continue = false;
				break;
		}
		real wtInstanceSvValRef17 = realValueSize1[0];
		realValueSize1[0] = wtInstanceSvValRef17;
		valRefsSize1[0] = 3;
		status = crtlInstance.setReal(valRefsSize1, 1, realValueSize1);
		if( (status == 3 || status == 4) )
		{
				logger.log(4, "set failed %d", status);
				global_execution_continue = false;
				break;
		}
		status = wtInstance.exitInitializationMode();
		status = crtlInstance.exitInitializationMode();
		break;
	}
	if( (global_execution_continue) )
	{
			FMI2Component[] fix_components[2] = { wtInstance , crtlInstance };
			{
 				int end = END_TIME - STEP_SIZE;
				real time = START_TIME;
				real fix_stepSize = 0.0;
				real fix_recoveryStepSize = 0.0;
				bool fix_recovering = false;
				bool fix_global_status = false;
				int fix_comp_index = 0;
				real[] wtInstanceROut[1];
				bool[] crtlInstanceBOut[1];
				uInt[] wtInstanceVrefROut[1] = { 17 };
				uInt[] crtlInstanceVrefBOut[1] = { 4 };
				real[] wtInstanceRIn[1];
				real[] crtlInstanceRIn[1];
				uInt[] wtInstanceVrefRIn[1] = { 16 };
				uInt[] crtlInstanceVrefRIn[1] = { 3 };
				int[] fix_status[2] = { 0 , 0 };
				fix_status[0] = wtInstance.getReal(wtInstanceVrefROut, 1, wtInstanceROut);
				if( (fix_status[0] == 3 || fix_status[0] == 4) )
				{
						logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
						global_execution_continue = false;
				}
				fix_status[1] = crtlInstance.getBoolean(crtlInstanceVrefBOut, 1, crtlInstanceBOut);
				if( (fix_status[1] == 3 || fix_status[1] == 4) )
				{
						logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
						global_execution_continue = false;
				}
				string[] data_headers[2] = { "{controller}.crtlInstance.valve" , "{tank}.wtInstance.level" };
				DataWriterConfig dataWriter_configuration = dataWriter.writeHeader(data_headers);
				string[] data_values[2] = { crtlInstanceBOut[0] , wtInstanceROut[0] };
				data_values[0] = crtlInstanceBOut[0];
				data_values[1] = wtInstanceROut[0];
				dataWriter.writeDataPoint(dataWriter_configuration, time, data_values);
				while( (global_execution_continue && time <= end) )
				{
					if( (fix_recovering) )
					{
							fix_stepSize = fix_recoveryStepSize;
							fix_recovering = false;
					}
					else
					{
						fix_stepSize = STEP_SIZE;
					}
					if( (crtlInstanceBOut[0]) )
					{
						wtInstanceRIn[0] = 1.0;
					}
					else
					{
						wtInstanceRIn[0] = 0.0;
					}
					crtlInstanceRIn[0] = wtInstanceROut[0];
					fix_status[0] = wtInstance.setReal(wtInstanceVrefRIn, 1, wtInstanceRIn);
					if( (fix_status[0] == 3 || fix_status[0] == 4) )
					{
							logger.log(4, "set failed %d ", fix_status[fix_comp_index]);
							global_execution_continue = false;
							break;
					}
					fix_status[1] = crtlInstance.setReal(crtlInstanceVrefRIn, 1, crtlInstanceRIn);
					if( (fix_status[1] == 3 || fix_status[1] == 4) )
					{
							logger.log(4, "set failed %d ", fix_status[fix_comp_index]);
							global_execution_continue = false;
							break;
					}
					fix_status[0] = wtInstance.doStep(time, fix_stepSize, true);
					fix_status[1] = crtlInstance.doStep(time, fix_stepSize, true);
					fix_global_status = true;
					fix_comp_index = 0;
					while( (fix_comp_index < 2) )
					{
						if( (fix_status[fix_comp_index] != 0) )
						{
								fix_global_status = false;
								logger.log(4, "doStep failed for %d - status code ", fix_status[fix_comp_index]);
								break;
						}
						fix_comp_index = fix_comp_index + 1;
					}
					if( (!fix_global_status) )
					{
							logger.log(4, "Deviating from normal execution. Handling exceptions %d", 0);
							fix_global_status = true;
							fix_comp_index = 0;
							bool discardObserved = false;
							while( (fix_comp_index < 2) )
							{
								logger.log(4, "Fmu index %d, status code %d", fix_comp_index, fix_status[fix_comp_index]);
								if( (fix_status[fix_comp_index] != 0) )
								{
										fix_global_status = false;
										if( (fix_status[fix_comp_index] == 5) )
										{
											logger.log(4, "doStep failed for %d PENDING not supported- status code ", fix_status[fix_comp_index]);
										}
										else
										{
											if( (fix_status[fix_comp_index] == 3 || fix_status[fix_comp_index] == 4) )
											{
												logger.log(4, "doStep failed for %d - status code ", fix_status[fix_comp_index]);
											}
										}
										if( (fix_status[fix_comp_index] == 2) )
										{
												logger.log(2, "Instance discarding %d", fix_comp_index);
												discardObserved = true;
										}
										global_execution_continue = false;
										break;
								}
								fix_comp_index = fix_comp_index + 1;
							}
							if( (!global_execution_continue) )
							{
								break;
							}
					}
					if( (global_execution_continue && !fix_recovering) )
					{
							fix_status[0] = wtInstance.getReal(wtInstanceVrefROut, 1, wtInstanceROut);
							if( (fix_status[0] == 3 || fix_status[0] == 4) )
							{
									logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
									global_execution_continue = false;
									break;
							}
							fix_status[1] = crtlInstance.getBoolean(crtlInstanceVrefBOut, 1, crtlInstanceBOut);
							if( (fix_status[1] == 3 || fix_status[1] == 4) )
							{
									logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
									global_execution_continue = false;
									break;
							}
							time = time + fix_stepSize;
							data_values[0] = crtlInstanceBOut[0];
							data_values[1] = wtInstanceROut[0];
							dataWriter.writeDataPoint(dataWriter_configuration, time, data_values);
					}
				}
				wtInstance.terminate();
				crtlInstance.terminate();
				dataWriter.close();
			}
	}
	tank.freeInstance(wtInstance);
	controller.freeInstance(crtlInstance);
	unload(tank);
	unload(controller);
	unload(math);
	unload(logger);
	unload(dataWriter);
}