module FMI2 {
	FMI2Component instantiate(string name, bool logging);

 	int setupExperiment(FMI2Component comp, bool toleranceDefined, real tolerance, real startTime, bool stopTimeDefined, real stopTime);
 	int enterInitializationMode(FMI2Component comp);
 	int exitInitializationMode(FMI2Component comp);
 	int setReal(FMI2Component comp, uint vr[], uint nvr,real values[]);
 	int getReal(FMI2Component comp, uint vr[], uint nvr, real values[]);
 	int doStep(FMI2Component comp, real time, real timestep);
 	int terminate(FMI2Component comp);
 	void freeInstance(FMI2Component comp);
}

 simulation
  import FMI2;

 {
FMI2 FMUA = load("FMI2", "path/to/FMUA.fmu");
FMI2 FMUB = load("FMI2", "path/to/FMUB.fmu");

FMI2Component Aa = FMUA.instantiate("A", true);
FMI2Component Ba = FMUB.instantiate("B", true);

real ay[1] = {0.0};

uint byref[1] = {1};
real time = 0.0;
real H = 0.01;
int status;

expand replaceMe(true,0.0,f,"kk");

status = FMUB.exitInitializationMode(B);
while (time < 10.0) {
		status = FMUA.doStep(A, time, H);
		status = FMUA.getReal(A, ayref, 1, ay);
		status = FMUB.setReal(B, buref, 1, ay);
		status = FMUB.doStep(B, time, H);
		status = FMUB.getReal(B, byref, 1, by);
		status = FMUA.setReal(A, auref, 1, by);
		time = time + H;
}
observable;

if(a < 9){
t=3;
}
status = FMUA.terminate(A);
status = FMUB.terminate(B);
FMUA.freeInstance(A);

unload(FMUA);
unload(FMUA);

;
}
