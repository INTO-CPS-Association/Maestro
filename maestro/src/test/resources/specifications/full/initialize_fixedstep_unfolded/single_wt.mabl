simulation 
import FixedStep;
import TypeConverter;
import Initializer;

{
real START_TIME = 0.0;
real END_TIME = 10.0;
real STEP_SIZE = 0.1;
Math math = load("Math");
FMI2 tankcontroller = load("FMI2", "{8c4e810f-3df3-4a00-8276-176fa3c9f000}", "src/test/resources/watertankcontroller-c.fmu");
FMI2 SingleWatertank = load("FMI2", "{cfc65592-9ece-4563-9705-1581b6e7071c}", "src/test/resources/singlewatertank-20sim.fmu");
FMI2Component crtlInstance = tankcontroller.instantiate("crtlInstance", false, false);
FMI2Component wtInstance = SingleWatertank.instantiate("wtInstance", false, false);
IFmuComponent components[2] = {wtInstance, crtlInstance};
bool global_execution_continue = true;
{
	int status = 0;
	status = crtlInstance.setupExperiment(false, 0.0, START_TIME, true, END_TIME);;
	status = wtInstance.setupExperiment(false, 0.0, START_TIME, true, END_TIME);;
	real[] realValueSize7[7] = {9.0, 1.0, 1.0, 9.81, 1.0, 0.0, 0.0};
	uInt[] valRefsSize7[7] = {0, 1, 2, 3, 4, 5, 6};
	status = wtInstance.setReal(valRefsSize7, 7, realValueSize7);;
	real[] realValueSize2[2] = {2.0, 1.0};
	uInt[] valRefsSize2[2] = {0, 1};
	status = crtlInstance.setReal(valRefsSize2, 2, realValueSize2);;
	status = crtlInstance.enterInitializationMode();;
	status = wtInstance.enterInitializationMode();;
	bool[] booleanValueSize1[1];
	uInt[] valRefsSize1[1] = {4};
	status = crtlInstance.getBoolean(valRefsSize1, 1, booleanValueSize1);;
	bool crtlInstanceSvValRef4 = booleanValueSize1[0];
	real wtInstanceSvValRef16Real;

	{
		if( crtlInstanceSvValRef4 )
		{
			wtInstanceSvValRef16Real = 1.0;
			}
		else
		{
			wtInstanceSvValRef16Real = 0.0;
			};
		}
	;
	real[] realValueSize1[1] = {wtInstanceSvValRef16Real};
	valRefsSize1[0] = 16;;
	status = wtInstance.setReal(valRefsSize1, 1, realValueSize1);;
	valRefsSize1[0] = 17;;
	status = wtInstance.getReal(valRefsSize1, 1, realValueSize1);;
	bool wtInstanceSvValRef17 = realValueSize1[0];
	realValueSize1[0] = wtInstanceSvValRef17;;
	valRefsSize1[0] = 3;;
	status = crtlInstance.setReal(valRefsSize1, 1, realValueSize1);;
	status = crtlInstance.exitInitializationMode();;
	status = wtInstance.exitInitializationMode();;
	valRefsSize1[0] = 4;;
	status = crtlInstance.getBoolean(valRefsSize1, 1, booleanValueSize1);;
	crtlInstanceSvValRef4 = booleanValueSize1[0];;
	valRefsSize1[0] = 17;;
	status = wtInstance.getReal(valRefsSize1, 1, realValueSize1);;
	wtInstanceSvValRef17 = realValueSize1[0];;
	}
;

{
	CSV csv = load("CSV");
	CSVFile csvfile = csv.open("mm.csv");
	int end = END_TIME - STEP_SIZE;
	real time = 0.0;
	string[] csv_headers[2] = {"crtlInstance.valve", "wtInstance.level"};
	csvfile.writeHeader(csv_headers);
	int status;
	real[] wtInstanceROut[1];
	bool[] crtlInstanceBOut[1];
	uInt[] wtInstanceVrefROut[1] = {17};
	uInt[] crtlInstanceVrefBOut[1] = {4};
	real[] wtInstanceRIn[1];
	real[] crtlInstanceRIn[1];
	uInt[] wtInstanceVrefRIn[1] = {16};
	uInt[] crtlInstanceVrefRIn[1] = {3};
	status = wtInstance.getReal(wtInstanceVrefROut, 1, wtInstanceROut);;
	if( status == 0 )
	{

		{
			;
			}

		};
	status = crtlInstance.getBoolean(crtlInstanceVrefBOut, 1, crtlInstanceBOut);;
	if( status == 0 )
	{

		{
			;
			}

		};
	string[] csv_values[2] = {crtlInstanceBOut[0], wtInstanceROut[0]};
	csvfile.writeRow(time, csv_values);
	while( time <= end )
	{
		crtlInstanceRIn[0] = wtInstanceROut[0];;

		{
			if( crtlInstanceBOut[0] )
			{
				wtInstanceRIn[0] = 1.0;
				}
			else
			{
				wtInstanceRIn[0] = 0.0;
				};
			}
		;
		status = wtInstance.setReal(wtInstanceVrefRIn, 1, wtInstanceRIn);;
		if( status == 0 )
		{

			{
				;
				}

			};
		status = crtlInstance.setReal(crtlInstanceVrefRIn, 1, crtlInstanceRIn);;
		if( status == 0 )
		{

			{
				;
				}

			};
		status = wtInstance.doStep(time, STEP_SIZE, true);;
		if( status == 0 )
		{

			{
				;
				}

			};
		status = crtlInstance.doStep(time, STEP_SIZE, true);;
		if( status == 0 )
		{

			{
				;
				}

			};
		status = wtInstance.getReal(wtInstanceVrefROut, 1, wtInstanceROut);;
		if( status == 0 )
		{

			{
				;
				}

			};
		status = crtlInstance.getBoolean(crtlInstanceVrefBOut, 1, crtlInstanceBOut);;
		if( status == 0 )
		{

			{
				;
				}

			};
		time = time + STEP_SIZE;;
		csv_values[0] = crtlInstanceBOut[0];;
		csv_values[1] = wtInstanceROut[0];;
		csvfile.writeRow(time, csv_values);
		}
	;
	wtInstance.terminate();
	crtlInstance.terminate();
	csv.close(csvfile);
	unload(csv);
	}
;
tankcontroller.freeInstance(crtlInstance);
SingleWatertank.freeInstance(wtInstance);
unload(tankcontroller);
unload(SingleWatertank);
unload(math);

}