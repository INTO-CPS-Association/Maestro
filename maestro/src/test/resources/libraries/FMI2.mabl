 module FMI2 {
	FMI2Component instantiate(string name, bool logging);
 	void freeInstance(FMI2Component comp);
}


 module FMI2Component {

    // control
 	int setupExperiment( bool toleranceDefined, real tolerance, real startTime, bool stopTimeDefined, real stopTime);
 	int doStep(real currentCommunicationPoint, real communicationStepSize, bool noSetFMUStatePriorToCurrentPoint);

 	int terminate();
    int reset();

    //initialization
 	int enterInitializationMode();
 	int exitInitializationMode();

    // state exchange
 	int setReal(UInt[] vr, UInt nvr,real[] values);
 	int getReal(UInt[] vr, UInt nvr, real[] values);
 	int setInteger(UInt[] vr, UInt nvr,int[] values);
    int getInteger(UInt[] vr, UInt nvr, int[] values);
    int setBoolean(UInt[] vr, UInt nvr,bool[] values);
    int getBoolean(UInt[] vr, UInt nvr, bool[] values);
    int setString(UInt[] vr, UInt nvr,string[] values);
    int getString(UInt[] vr, UInt nvr, string[] values);

    // derivatives
    int setRealInputDerivatives(UInt[] scalarValueIndices, int[] order,	real[] derivatives);
    int getRealOutputDerivatives(long[] scalarValueIndices, int[] order, ref double[] derivatives);
    int getDirectionalDerivative(long[] vUnknownRef,long[] vKnownRef, double[] dvKnown,ref double[] derivatives);

    // logging
 	int setDebugLogging(boolean loggingOn, string[] categories);

    // status
    int getStatus(Fmi2StatusKind kind, ref int status);
    int getBooleanStatus(Fmi2StatusKind kind, ref bool status);
    int getIntegerStatus(Fmi2StatusKind kind, ref integer status);
    int getRealStatus(Fmi2StatusKind kind, ref real status);
    int getStringStatus(Fmi2StatusKind kind, ref string status);

    //state
    int getState(ref FmuState state);
    int setState(FmuState state);
    int freeState(ref FmuState state);

}

module FmuState {}



