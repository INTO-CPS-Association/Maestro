simulation 
import FixedStep;
import TypeConverter;
import Initializer;
import DebugLogging;
{
 	bool global_execution_continue = true;
	Math math = load("Math");
	Logger logger = load("Logger");
	DataWriter dataWriter = load("DataWriter");
	FMI2 x1 = load("FMI2", "{8c4e810f-3df3-4a00-8276-176fa3c9f000}", "src/test/resources/watertankcontroller-c.fmu");
	if( ((x1 == null)) )
	{
		global_execution_continue = false;
	}
	FMI2 x2 = load("FMI2", "{cfc65592-9ece-4563-9705-1581b6e7071c}", "src/test/resources/singlewatertank-20sim.fmu");
	if( ((x2 == null)) )
	{
		global_execution_continue = false;
	}
	@map controller -> "controller";
	FMI2Component controller = null;
	if( ((global_execution_continue)) )
	{
			controller = x1.instantiate("controller", false, false);
			if( ((controller == null)) )
			{
				global_execution_continue = false;
			}
	}
	@map tank -> "tank";
	FMI2Component tank = null;
	if( ((global_execution_continue)) )
	{
			tank = x2.instantiate("tank", false, false);
			if( ((tank == null)) )
			{
				global_execution_continue = false;
			}
	}
	if( ((global_execution_continue)) )
	{
			FMI2Component[] components[2] = { controller , tank };
			real START_TIME = 0.0;
			real STEP_SIZE = 0.1;
			real END_TIME = 10.0;
			while( (global_execution_continue) )
			{
				int status = 0;
				status = controller.setupExperiment(false, 0.0, START_TIME, true, END_TIME);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "Setup Experiment Failed:  %d", status);
						global_execution_continue = false;
						break;
				}
				status = tank.setupExperiment(false, 0.0, START_TIME, true, END_TIME);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "Setup Experiment Failed:  %d", status);
						global_execution_continue = false;
						break;
				}
				real[] realValueSize2[2] = { 2.0 , 1.0 };
				uInt[] valRefsSize2[2] = { 0 , 1 };
				status = controller.setReal(valRefsSize2, 2, realValueSize2);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "set failed %d", status);
						global_execution_continue = false;
						break;
				}
				real[] realValueSize7[7] = { 9.0 , 1.0 , 1.0 , 9.81 , 1.0 , 0.0 , 0.0 };
				uInt[] valRefsSize7[7] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 };
				status = tank.setReal(valRefsSize7, 7, realValueSize7);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "set failed %d", status);
						global_execution_continue = false;
						break;
				}
				status = controller.enterInitializationMode();
				status = tank.enterInitializationMode();
				bool[] BooleanValueSize1[1];
				uInt[] valRefsSize1[1] = { 4 };
				status = controller.getBoolean(valRefsSize1, 1, BooleanValueSize1);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "get failed %d", status);
						global_execution_continue = false;
						break;
				}
				bool controllerSvValRef4 = BooleanValueSize1[0];
				real tankSvValRef16Real;
				if( (controllerSvValRef4) )
				{
					tankSvValRef16Real = 1.0;
				}
				else
				{
					tankSvValRef16Real = 0.0;
				}
				real[] realValueSize1[1] = { tankSvValRef16Real };
				valRefsSize1[0] = 16;
				status = tank.setReal(valRefsSize1, 1, realValueSize1);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "set failed %d", status);
						global_execution_continue = false;
						break;
				}
				valRefsSize1[0] = 17;
				status = tank.getReal(valRefsSize1, 1, realValueSize1);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "get failed %d", status);
						global_execution_continue = false;
						break;
				}
				real tankSvValRef17 = realValueSize1[0];
				realValueSize1[0] = tankSvValRef17;
				valRefsSize1[0] = 3;
				status = controller.setReal(valRefsSize1, 1, realValueSize1);
				if( (status == 3 || status == 4) )
				{
						logger.log(4, "set failed %d", status);
						global_execution_continue = false;
						break;
				}
				status = controller.exitInitializationMode();
				status = tank.exitInitializationMode();
				break;
			}
			if( (global_execution_continue) )
			{
					FMI2Component[] fix_components[2] = { controller , tank };
					{
 						int end = END_TIME - STEP_SIZE;
						real time = START_TIME;
						real fix_stepSize = 0.0;
						real fix_recoveryStepSize = 0.0;
						bool fix_recovering = false;
						bool fix_global_status = false;
						int fix_comp_index = 0;
						bool[] controllerBOut[1];
						real[] tankROut[1];
						uInt[] controllerVrefBOut[1] = { 4 };
						uInt[] tankVrefROut[1] = { 17 };
						real[] controllerRIn[1];
						real[] tankRIn[1];
						uInt[] controllerVrefRIn[1] = { 3 };
						uInt[] tankVrefRIn[1] = { 16 };
						int[] fix_status[2] = { 0 , 0 };
						fix_status[0] = controller.getBoolean(controllerVrefBOut, 1, controllerBOut);
						if( (fix_status[0] == 3 || fix_status[0] == 4) )
						{
								logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
								global_execution_continue = false;
						}
						fix_status[1] = tank.getReal(tankVrefROut, 1, tankROut);
						if( (fix_status[1] == 3 || fix_status[1] == 4) )
						{
								logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
								global_execution_continue = false;
						}
						string[] data_headers[2] = { "{x1}.controller.valve" , "{x2}.tank.level" };
						DataWriterConfig dataWriter_configuration = dataWriter.writeHeader(data_headers);
						string[] data_values[2] = { controllerBOut[0] , tankROut[0] };
						data_values[0] = controllerBOut[0];
						data_values[1] = tankROut[0];
						dataWriter.writeDataPoint(dataWriter_configuration, time, data_values);
						while( (global_execution_continue && time <= end) )
						{
							if( (fix_recovering) )
							{
									fix_stepSize = fix_recoveryStepSize;
									fix_recovering = false;
							}
							else
							{
								fix_stepSize = STEP_SIZE;
							}
							controllerRIn[0] = tankROut[0];
							if( (controllerBOut[0]) )
							{
								tankRIn[0] = 1.0;
							}
							else
							{
								tankRIn[0] = 0.0;
							}
							fix_status[0] = controller.setReal(controllerVrefRIn, 1, controllerRIn);
							if( (fix_status[0] == 3 || fix_status[0] == 4) )
							{
									logger.log(4, "set failed %d ", fix_status[fix_comp_index]);
									global_execution_continue = false;
									break;
							}
							fix_status[1] = tank.setReal(tankVrefRIn, 1, tankRIn);
							if( (fix_status[1] == 3 || fix_status[1] == 4) )
							{
									logger.log(4, "set failed %d ", fix_status[fix_comp_index]);
									global_execution_continue = false;
									break;
							}
							fix_status[0] = controller.doStep(time, fix_stepSize, true);
							fix_status[1] = tank.doStep(time, fix_stepSize, true);
							fix_global_status = true;
							fix_comp_index = 0;
							while( (fix_comp_index < 2) )
							{
								if( (fix_status[fix_comp_index] != 0) )
								{
										fix_global_status = false;
										logger.log(4, "doStep failed for %d - status code ", fix_status[fix_comp_index]);
										break;
								}
								fix_comp_index = fix_comp_index + 1;
							}
							if( (!fix_global_status) )
							{
									logger.log(4, "Deviating from normal execution. Handling exceptions %d", 0);
									fix_global_status = true;
									fix_comp_index = 0;
									bool discardObserved = false;
									while( (fix_comp_index < 2) )
									{
										logger.log(4, "Fmu index %d, status code %d", fix_comp_index, fix_status[fix_comp_index]);
										if( (fix_status[fix_comp_index] != 0) )
										{
												fix_global_status = false;
												if( (fix_status[fix_comp_index] == 5) )
												{
													logger.log(4, "doStep failed for %d PENDING not supported- status code ", fix_status[fix_comp_index]);
												}
												else
												{
													if( (fix_status[fix_comp_index] == 3 || fix_status[fix_comp_index] == 4) )
													{
														logger.log(4, "doStep failed for %d - status code ", fix_status[fix_comp_index]);
													}
												}
												if( (fix_status[fix_comp_index] == 2) )
												{
														logger.log(2, "Instance discarding %d", fix_comp_index);
														discardObserved = true;
												}
												global_execution_continue = false;
												break;
										}
										fix_comp_index = fix_comp_index + 1;
									}
									if( (!global_execution_continue) )
									{
										break;
									}
							}
							if( (global_execution_continue && !fix_recovering) )
							{
									fix_status[0] = controller.getBoolean(controllerVrefBOut, 1, controllerBOut);
									if( (fix_status[0] == 3 || fix_status[0] == 4) )
									{
											logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
											global_execution_continue = false;
											break;
									}
									fix_status[1] = tank.getReal(tankVrefROut, 1, tankROut);
									if( (fix_status[1] == 3 || fix_status[1] == 4) )
									{
											logger.log(4, "get failed %d ", fix_status[fix_comp_index]);
											global_execution_continue = false;
											break;
									}
									time = time + fix_stepSize;
									data_values[0] = controllerBOut[0];
									data_values[1] = tankROut[0];
									dataWriter.writeDataPoint(dataWriter_configuration, time, data_values);
							}
						}
						controller.terminate();
						tank.terminate();
						dataWriter.close();
					}
			}
	}
	x1.freeInstance(controller);
	x2.freeInstance(tank);
	unload(x1);
	unload(x2);
	unload(math);
	unload(logger);
	unload(dataWriter);
}